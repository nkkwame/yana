// YANA Enterprises Database Schema
// Comprehensive multi-platform ecosystem

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// SHARED MODELS - Used across all platforms
// ============================================================================

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  firstName   String
  lastName    String
  password    String
  avatar      String?
  bio         String?
  isVerified  Boolean  @default(false)
  isActive    Boolean  @default(true)
  role        UserRole @default(USER)
  platforms   String[] // Which platforms user has access to
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Platform-specific relationships
  careProfile     CareProfile?
  martSeller      MartSeller?
  martOrders      MartOrder[]
  learnEnrollments LearnEnrollment[]
  learnCourses    LearnCourse[]
  studiosProfile  StudiosProfile?
  studiosAssets   StudiosAsset[]
  sessions        Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  platform  String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@map("sessions")
}

// ============================================================================
// YANA CARE - Hospital Management System
// ============================================================================

model CareProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  licenseNumber  String?  @unique
  specialization String?
  department     String?
  experience     Int?     // years of experience
  phoneNumber    String?
  address        String?
  profileType    CareProfileType @default(PATIENT)
  isVerified     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  patientAppointments CareAppointment[] @relation("PatientAppointments")
  doctorAppointments  CareAppointment[] @relation("DoctorAppointments")
  medicalRecords     CareMedicalRecord[]

  @@map("care_profiles")
}

model CareAppointment {
  id          String   @id @default(cuid())
  patientId   String
  doctorId    String
  date        DateTime
  duration    Int      // minutes
  type        String   // "consultation", "checkup", etc.
  status      CareAppointmentStatus @default(SCHEDULED)
  notes       String?
  diagnosis   String?
  prescription String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  patient CareProfile @relation("PatientAppointments", fields: [patientId], references: [id])
  doctor  CareProfile @relation("DoctorAppointments", fields: [doctorId], references: [id])

  @@map("care_appointments")
}

model CareMedicalRecord {
  id          String   @id @default(cuid())
  patientId   String
  recordType  String   // "lab_result", "diagnosis", "prescription"
  title       String
  description String
  attachments String[] // File URLs
  date        DateTime
  createdAt   DateTime @default(now())

  patient CareProfile @relation(fields: [patientId], references: [id])

  @@map("care_medical_records")
}

// ============================================================================
// YANA MART - E-commerce Platform
// ============================================================================

model MartSeller {
  id          String   @id @default(cuid())
  userId      String   @unique
  storeName   String
  description String?
  logo        String?
  isVerified  Boolean  @default(false)
  rating      Float    @default(0)
  totalSales  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  products MartProduct[]

  @@map("mart_sellers")
}

model MartCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  parentId    String?
  createdAt   DateTime @default(now())

  parent   MartCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children MartCategory[] @relation("CategoryHierarchy")
  products MartProduct[]

  @@map("mart_categories")
}

model MartProduct {
  id          String   @id @default(cuid())
  sellerId    String
  categoryId  String
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  images      String[] // Array of image URLs
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  rating      Float    @default(0)
  totalSales  Int      @default(0)
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  seller    MartSeller     @relation(fields: [sellerId], references: [id])
  category  MartCategory   @relation(fields: [categoryId], references: [id])
  orderItems MartOrderItem[]

  @@map("mart_products")
}

model MartOrder {
  id         String   @id @default(cuid())
  userId     String
  status     MartOrderStatus @default(PENDING)
  total      Decimal  @db.Decimal(10, 2)
  shippingAddress String
  paymentMethod   String
  paymentStatus   MartPaymentStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user  User            @relation(fields: [userId], references: [id])
  items MartOrderItem[]

  @@map("mart_orders")
}

model MartOrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  order   MartOrder   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product MartProduct @relation(fields: [productId], references: [id])

  @@map("mart_order_items")
}

// ============================================================================
// YANA LEARN - E-learning Platform
// ============================================================================

model LearnCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  color       String?
  createdAt   DateTime @default(now())

  courses LearnCourse[]

  @@map("learn_categories")
}

model LearnCourse {
  id          String   @id @default(cuid())
  instructorId String
  categoryId  String
  title       String
  description String
  thumbnail   String?
  price       Decimal? @db.Decimal(10, 2)
  duration    Int?     // minutes
  level       LearnCourseLevel @default(BEGINNER)
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  rating      Float    @default(0)
  totalStudents Int    @default(0)
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  instructor  User              @relation(fields: [instructorId], references: [id])
  category    LearnCategory     @relation(fields: [categoryId], references: [id])
  lessons     LearnLesson[]
  enrollments LearnEnrollment[]

  @@map("learn_courses")
}

model LearnLesson {
  id        String   @id @default(cuid())
  courseId  String
  title     String
  content   String
  videoUrl  String?
  order     Int
  duration  Int?     // minutes
  isPreview Boolean  @default(false)
  createdAt DateTime @default(now())

  course    LearnCourse     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress  LearnProgress[]

  @@map("learn_lessons")
}

model LearnEnrollment {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime @default(now())
  completedAt  DateTime?
  progress     Int      @default(0) // percentage
  certificateUrl String?

  user   User        @relation(fields: [userId], references: [id])
  course LearnCourse @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("learn_enrollments")
}

model LearnProgress {
  id         String   @id @default(cuid())
  userId     String
  lessonId   String
  isCompleted Boolean  @default(false)
  watchTime  Int      @default(0) // seconds
  completedAt DateTime?

  lesson LearnLesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("learn_progress")
}

// ============================================================================
// YANA STUDIOS - Creative Services Platform
// ============================================================================

model StudiosProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  studioName  String
  specialty   StudiosSpecialty[]
  portfolio   String[] // URLs to portfolio items
  hourlyRate  Decimal? @db.Decimal(10, 2)
  description String?
  skills      String[]
  isVerified  Boolean  @default(false)
  rating      Float    @default(0)
  totalProjects Int    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("studios_profiles")
}

model StudiosAsset {
  id          String   @id @default(cuid())
  creatorId   String
  title       String
  description String
  assetType   StudiosAssetType
  fileUrl     String
  thumbnailUrl String?
  price       Decimal? @db.Decimal(10, 2)
  tags        String[]
  downloads   Int      @default(0)
  isFree      Boolean  @default(false)
  license     String   @default("standard")
  createdAt   DateTime @default(now())

  creator User @relation(fields: [creatorId], references: [id])

  @@map("studios_assets")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum CareProfileType {
  PATIENT
  DOCTOR
  NURSE
  ADMIN
}

enum CareAppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum MartOrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum MartPaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum LearnCourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum StudiosSpecialty {
  GRAPHIC_DESIGN
  WEB_DESIGN
  VIDEO_EDITING
  PHOTOGRAPHY
  ILLUSTRATION
  ANIMATION
  BRANDING
  UI_UX
}

enum StudiosAssetType {
  TEMPLATE
  STOCK_PHOTO
  ICON
  ILLUSTRATION
  FONT
  VIDEO
  AUDIO
  PRESET
}
